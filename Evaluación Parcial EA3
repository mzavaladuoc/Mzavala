terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.56.1"  # Ajusta la versión según tus necesidades
    }
  }
}

provider "aws" {
  region = "us-east-1"
}

# VPC
module "vpc" {
  source = "terraform-aws-modules/vpc/aws"
 
  name = "my-vpc"
  cidr = "10.0.0.0/16"
 
  azs             = ["us-east-1a", "us-east-1b", "us-east-1c"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24", "10.0.103.0/24"]
 
  enable_nat_gateway = true
  enable_vpn_gateway = false
 
  tags = {
    Terraform   = "true"
    Environment = "prd"
  }
}

# Security Group
resource "aws_security_group" "webserver_sg" {
  name        = "webserver-sg"
  description = "Security group for web servers"
  
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "webserver-sg"
  }
}

# Creación Bucket S3
resource "aws_s3_bucket" "my_bucket" {
  bucket = "my-bucket-mzavala190182"
}

resource "aws_s3_bucket_public_access_block" "my_bucket_access_block" {
  bucket = aws_s3_bucket.my_bucket.id

  block_public_acls       = false
  block_public_policy     = false
  ignore_public_acls      = false
  restrict_public_buckets = false
}

resource "aws_s3_bucket_policy" "my_bucket_policy" {
  bucket = aws_s3_bucket.my_bucket.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid       = "PublicReadGetObject"
        Effect    = "Allow"
        Principal = "*"
        Action    = "s3:GetObject"
        Resource  = "${aws_s3_bucket.my_bucket.arn}/*"
      },
    ]
  })
}

resource "aws_s3_object" "index_php" {
  bucket = aws_s3_bucket.my_bucket.id
  key    = "index.php"
  source = "path/to/local/index.php"  # Reemplaza con la ruta local al archivo index.php
  acl    = "public-read"
  content_type = "text/html"
}

# EC2
resource "aws_instance" "ec2_instance" {
  count         = 3
  ami           = "ami-01b799c439fd5516a"  
  instance_type = "t2.micro"
  key_name      = "vockey"
  subnet_id     = module.vpc.public_subnets[count.index]
  security_groups = [aws_security_group.webserver_sg.id]
  
  user_data = <<-EOF
              #!/bin/bash
              sudo yum install -y httpd php
              EOF
  
  tags = {
    Name = "webserver-${count.index}"
  }
}

# Creación y montaje del volumen EFS en las instancias EC2
resource "aws_efs_file_system" "efs" {
  creation_token = "my-efs"
  performance_mode = "generalPurpose"
}

resource "aws_efs_mount_target" "efs_mount" {
  count       = 3
  file_system_id = aws_efs_file_system.efs.id
  subnet_id   = module.vpc.public_subnets[count.index]
  security_groups = [aws_security_group.webserver_sg.id]
}

resource "null_resource" "mount_efs" {
  count = 3

  provisioner "local-exec" {
    command = "sudo mount -t efs ${aws_efs_file_system.efs.dns_name}:/ /var/www/html"
  }

  depends_on = [aws_instance.ec2_instance]
}

# Balanceador de carga
resource "aws_lb" "my_alb" {
  name               = "my-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.webserver_sg.id]
  subnets            = module.vpc.public_subnets
}

resource "aws_lb_target_group" "my_target_group" {
  name     = "my-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = module.vpc.vpc_id

  health_check {
    path = "/"
  }
}

resource "aws_lb_listener" "http_listener" {
  load_balancer_arn = aws_lb.my_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.my_target_group.arn
  }
}

resource "aws_lb_target_group_attachment" "ec2_attachments" {
  count            = 3
  target_group_arn = aws_lb_target_group.my_target_group.arn
  target_id        = aws_instance.ec2_instance[count.index].id
}
